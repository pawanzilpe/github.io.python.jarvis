import speech_recognition as sr
from pywebcopy import save_webpage
import os
import webbrowser
import pyttsx3

def voice_to_text():
    """Convert voice input to text using offline recognition"""
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening for website command...")
        audio = r.listen(source, timeout=8)
    
    try:
        command = r.recognize_sphinx(audio)
        print("Command:", command)
        return command.lower()
    except sr.UnknownValueError:
        return "error"
    except sr.RequestError:
        return "error"

def generate_website(command):
    """Generate basic HTML based on voice command"""
    # Simple template with placeholders
    html_template = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>{command.capitalize()} Site</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; }}
            header {{ background-color: #f0f0f0; padding: 20px; text-align: center; }}
            main {{ margin: 20px; }}
            footer {{ background-color: #333; color: white; text-align: center; padding: 10px; }}
        </style>
    </head>
    <body>
        <header>
            <h1>Welcome to My {command.capitalize()} Website</h1>
        </header>
        
        <main>
            <section>
                <h2>About This Site</h2>
                <p>This website was generated by voice command!</p>
                <p>You asked for: "{command}"</p>
            </section>
        </main>
        
        <footer>
            <p>Voice Generated Website | Python Project</p>
        </footer>
    </body>
    </html>
    """
    return html_template

def text_to_speech(message):
    """Convert text to speech for feedback"""
    engine = pyttsx3.init()
    engine.say(message)
    engine.runAndWait()

def main():
    text_to_speech("Welcome to Voice Website Generator. What type of website do you want to create?")
    
    while True:
        command = voice_to_text()
        
        if "error" in command:
            text_to_speech("Sorry, I didn't catch that. Please try again.")
            continue
            
        if "exit" in command:
            text_to_speech("Exiting program. Goodbye!")
            break
            
        # Generate website
        html_content = generate_website(command)
        
        # Save to file
        filename = f"{command.replace(' ', '_')}_website.html"
        with open(filename, "w") as f:
            f.write(html_content)
        
        # Feedback and open
        text_to_speech(f"Generated {command} website successfully!")
        webbrowser.open(f'file://{os.path.abspath(filename)}')
        
        # Ask for next action
        text_to_speech("Say another command or 'exit' to quit")

if __name__ == "__main__":
    main()